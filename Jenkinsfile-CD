pipeline{
    agent any
    parameters {
	    choice(name: 'action', choices: 'create\nrollback', description: 'Create/rollback of the deployment')
    }
    stages {
        stage('git checkout'){
            steps{
                git 'https://github.com/Naresh240/spring-boot-hello.git'
            }
        }
        stage('Build CI Job'){
            steps{
                build 'spring-boot-hello-CI'
            }
        }
        stage('Application Deployment'){
            when {
				expression { params.action == 'create' }
			}
            steps{
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS_Credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    withCredentials([kubeconfigFile(credentialsId: 'kubernetes_credentials', variable: 'KUBECONFIG')]) {
                    sh """
                    kubectl apply -f deployement.yml
                    kubectl apply -f loadbalancer-service.yml
                    kubectl apply -f nodeport-service.yml
                    """
	               }
	           }
            }
        }
        stage('CleanUP'){
            when {
				expression { params.action == 'rollback' }
			}
            steps{
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS_Credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    withCredentials([kubeconfigFile(credentialsId: 'kubernetes_credentials', variable: 'KUBECONFIG')]) {
                    sh """
                    kubectl delete svc spring-boot-hello-loadbalancer spring-boot-hello-nodeport
                    kubectl delete deployments spring-boot-hello
                    """
	               }
	           }
            }
        }
    }
}
